{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport GoalItem from \"./components/GoalItem\";\nimport GoalInput from \"./components/GoalInput\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      courseGoals = _useState2[0],\n      setCourseGoals = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isAddMode = _useState4[0],\n      setIsAddMode = _useState4[1];\n\n  var addGoalHandler = function addGoalHandler(goalTitle) {\n    if (goalTitle.length === 0) {\n      return;\n    }\n\n    setCourseGoals(function (currentGoals) {\n      return [].concat(_toConsumableArray(currentGoals), [{\n        id: Math.random().toString(),\n        value: goalTitle\n      }]);\n    });\n    setIsAddMode(false);\n  };\n\n  var removeGoalHandler = function removeGoalHandler(goalId) {\n    setCourseGoals(function (currentGoals) {\n      return currentGoals.filter(function (goal) {\n        return goal.id !== goalId;\n      });\n    });\n  };\n\n  var cancelGoalAdditionHandler = function cancelGoalAdditionHandler() {\n    setIsAddMode(false);\n  };\n\n  return _jsxs(View, {\n    style: styles.screen,\n    children: [_jsx(Button, {\n      title: \"Add new Goal\",\n      onPress: function onPress() {\n        return setIsAddMode(true);\n      }\n    }), _jsx(GoalInput, {\n      visible: isAddMode,\n      onAddGoal: addGoalHandler,\n      onCancel: cancelGoalAdditionHandler\n    }), _jsx(FlatList, {\n      keyExtractor: function keyExtractor(item, index) {\n        return item.id;\n      },\n      data: courseGoals,\n      renderItem: function renderItem(itemData) {\n        return _jsx(GoalItem, {\n          id: itemData.item.id,\n          onDelete: removeGoalHandler,\n          title: itemData.item.value\n        });\n      }\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  screen: {\n    padding: 50\n  }\n});","map":{"version":3,"sources":["/Users/lewdamy/react-native/rn-complete-guide/App.js"],"names":["React","useState","GoalItem","GoalInput","App","courseGoals","setCourseGoals","isAddMode","setIsAddMode","addGoalHandler","goalTitle","length","currentGoals","id","Math","random","toString","value","removeGoalHandler","goalId","filter","goal","cancelGoalAdditionHandler","styles","screen","item","index","itemData","StyleSheet","create","padding"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;AAOA,OAAOC,QAAP;AACA,OAAOC,SAAP;;;AAEA,eAAe,SAASC,GAAT,GAAe;AAG5B,kBAAsCH,QAAQ,CAAC,EAAD,CAA9C;AAAA;AAAA,MAAOI,WAAP;AAAA,MAAoBC,cAApB;;AAEA,mBAAkCL,QAAQ,CAAC,KAAD,CAA1C;AAAA;AAAA,MAAOM,SAAP;AAAA,MAAkBC,YAAlB;;AAGA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,SAAS,EAAI;AAClC,QAAGA,SAAS,CAACC,MAAV,KAAqB,CAAxB,EAA2B;AACzB;AACD;;AAEDL,IAAAA,cAAc,CAAC,UAAAM,YAAY;AAAA,0CAAQA,YAAR,IACzB;AAACC,QAAAA,EAAE,EAAEC,IAAI,CAACC,MAAL,GAAcC,QAAd,EAAL;AAA+BC,QAAAA,KAAK,EAAEP;AAAtC,OADyB;AAAA,KAAb,CAAd;AAGAF,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GATD;;AAWA,MAAMU,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,MAAM,EAAI;AAClCb,IAAAA,cAAc,CAAC,UAAAM,YAAY,EAAI;AAE7B,aAAOA,YAAY,CAACQ,MAAb,CAAoB,UAACC,IAAD;AAAA,eAAUA,IAAI,CAACR,EAAL,KAAYM,MAAtB;AAAA,OAApB,CAAP;AACD,KAHa,CAAd;AAID,GALD;;AAOA,MAAMG,yBAAyB,GAAG,SAA5BA,yBAA4B,GAAM;AACtCd,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAFD;;AAIA,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEe,MAAM,CAACC,MAApB;AAAA,eACE,KAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,cAAd;AAA6B,MAAA,OAAO,EAAE;AAAA,eAAMhB,YAAY,CAAC,IAAD,CAAlB;AAAA;AAAtC,MADF,EAGE,KAAC,SAAD;AACE,MAAA,OAAO,EAAED,SADX;AAEE,MAAA,SAAS,EAAEE,cAFb;AAGE,MAAA,QAAQ,EAAEa;AAHZ,MAHF,EAQE,KAAC,QAAD;AACE,MAAA,YAAY,EAAE,sBAACG,IAAD,EAAOC,KAAP;AAAA,eAAiBD,IAAI,CAACZ,EAAtB;AAAA,OADhB;AAEE,MAAA,IAAI,EAAER,WAFR;AAGE,MAAA,UAAU,EAAE,oBAAAsB,QAAQ;AAAA,eAClB,KAAC,QAAD;AACE,UAAA,EAAE,EAAEA,QAAQ,CAACF,IAAT,CAAcZ,EADpB;AAEE,UAAA,QAAQ,EAAEK,iBAFZ;AAGE,UAAA,KAAK,EAAES,QAAQ,CAACF,IAAT,CAAcR;AAHvB,UADkB;AAAA;AAHtB,MARF;AAAA,IADF;AAqBD;AAED,IAAMM,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAC7BL,EAAAA,MAAM,EAAE;AACNM,IAAAA,OAAO,EAAE;AADH;AADqB,CAAlB,CAAf","sourcesContent":["import React, { useState } from 'react';\nimport { \n  StyleSheet, \n  View,  \n  Button, \n  FlatList \n} from 'react-native';\nimport GoalItem from './components/GoalItem';\nimport GoalInput from './components/GoalInput';\n\nexport default function App() {\n  \n  //useState to keep track of the list of the goals\n  const [courseGoals, setCourseGoals] = useState([]);\n  //useState to keep track when we click the Button to add a new goal\n  const [isAddMode, setIsAddMode] = useState(false);\n  \n  //save the enteredGoal in a list of elements\n  const addGoalHandler = goalTitle => {\n    if(goalTitle.length === 0) {\n      return;\n    }\n    //create an copy of the courseGoals with the new element\n    setCourseGoals(currentGoals => [...currentGoals, \n      {id: Math.random().toString(), value: goalTitle}\n    ]); \n    setIsAddMode(false);\n  };\n\n  const removeGoalHandler = goalId => {\n    setCourseGoals(currentGoals => {\n      // return a new copied array but filtering, aka removing the goal that has the right id\n      return currentGoals.filter((goal) => goal.id !== goalId);  \n    });\n  };\n\n  const cancelGoalAdditionHandler = () => {\n    setIsAddMode(false);\n  }\n\n  return (\n    <View style={styles.screen}>\n      <Button title=\"Add new Goal\" onPress={() => setIsAddMode(true)}/>\n\n      <GoalInput \n        visible={isAddMode} \n        onAddGoal={addGoalHandler} \n        onCancel={cancelGoalAdditionHandler}/>\n      \n      <FlatList\n        keyExtractor={(item, index) => item.id}\n        data={courseGoals} \n        renderItem={itemData => (\n          <GoalItem \n            id={itemData.item.id} \n            onDelete={removeGoalHandler} \n            title={itemData.item.value}/>\n        )}>\n      </FlatList>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n    screen: {\n      padding: 50\n    }\n});\n"]},"metadata":{},"sourceType":"module"}